{{- if .Values.scc.create }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.scc.rolename }}
  annotations:
    kubernetes.io/description: "Role for configuring node"
    "helm.sh/hook": pre-install
rules:
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames: [{{ .Values.scc.name }}]
    verbs: ["use"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Values.scc.rolename }}
  annotations:
    kubernetes.io/description: "RoleBinding for configuring node"
    "helm.sh/hook": pre-install
subjects:
  - kind: ServiceAccount
    name: {{ include "knawd-deployer.serviceAccountName" . }}
roleRef:
  kind: Role
  name: {{ .Values.scc.rolename }}
  apiGroup: rbac.authorization.k8s.io
{{- if .Values.daemonset.patchKnative }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knawd-cluster-role
  annotations:
    kubernetes.io/description: "ClusterRole for Knative Patch"
    "helm.sh/hook": pre-install
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - delete
      - get
      - list
      - patch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  knawd-cluster-role-binding
  annotations:
    kubernetes.io/description: "ClusterRoleBinding for Knative Patch"
    "helm.sh/hook": pre-install
subjects:
  - kind: ServiceAccount
    name: {{ include "knawd-deployer.serviceAccountName" . }}
    namespace: {{ .Release.Namespace }} 
roleRef:
  kind: ClusterRole
  name: knawd-cluster-role
  apiGroup: rbac.authorization.k8s.io
{{- end }}
{{- end }}